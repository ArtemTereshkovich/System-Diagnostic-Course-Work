// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using SystemDiagnostic.DAL.Data;

namespace SystemDiagnostic.WebAPI.Migrations
{
    [DbContext(typeof(ApplicationDataBaseContext))]
    partial class ApplicationDataBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SystemDiagnostic.Entitites.Computer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsConnected");

                    b.Property<string>("Login")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Computers");
                });

            modelBuilder.Entity("SystemDiagnostic.Entitites.ComputerComponents.DiskDrive", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ComputerDiskDriveId");

                    b.Property<string>("ComputerId")
                        .IsRequired();

                    b.Property<string>("MediaType");

                    b.Property<string>("Model");

                    b.Property<double>("SizeGB");

                    b.HasKey("Id");

                    b.HasIndex("ComputerId");

                    b.ToTable("DiskDrives");
                });

            modelBuilder.Entity("SystemDiagnostic.Entitites.ComputerComponents.MotherBoard", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ComputerId")
                        .IsRequired();

                    b.Property<string>("ComputerMotherBoardId")
                        .IsRequired();

                    b.Property<string>("Manufacturer");

                    b.Property<string>("Product");

                    b.HasKey("Id");

                    b.HasIndex("ComputerId")
                        .IsUnique();

                    b.ToTable("MotherBoards");
                });

            modelBuilder.Entity("SystemDiagnostic.Entitites.ComputerComponents.PhysicalMemory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("CapacityGB");

                    b.Property<string>("ComputerId")
                        .IsRequired();

                    b.Property<string>("ComputerPhysicalMemoryId")
                        .IsRequired();

                    b.Property<string>("FormFactor");

                    b.Property<string>("Manufacturer");

                    b.Property<int>("Speed");

                    b.HasKey("Id");

                    b.HasIndex("ComputerId");

                    b.ToTable("PhysicalMemories");
                });

            modelBuilder.Entity("SystemDiagnostic.Entitites.ComputerComponents.Processor", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Architecture");

                    b.Property<int>("ClockFrequency");

                    b.Property<string>("ComputerId")
                        .IsRequired();

                    b.Property<string>("ComputerProcessorId");

                    b.Property<string>("Description");

                    b.Property<int>("L2CacheSize");

                    b.Property<int>("L3CacheSize");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("NumberOfCores");

                    b.HasKey("Id");

                    b.HasIndex("ComputerId")
                        .IsUnique();

                    b.ToTable("Processors");
                });

            modelBuilder.Entity("SystemDiagnostic.Entitites.ComputerComponents.VideoCard", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdapterCompatibility");

                    b.Property<double>("AdapterRAMGB");

                    b.Property<string>("ComputerId")
                        .IsRequired();

                    b.Property<int>("MaxRefreshRate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("VideoProcessor");

                    b.HasKey("Id");

                    b.HasIndex("ComputerId");

                    b.ToTable("VideoCards");
                });

            modelBuilder.Entity("SystemDiagnostic.Entitites.MonitoringInformation.Process", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ComputerId")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ComputerId");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("SystemDiagnostic.Entitites.MonitoringInformation.ProcessInformation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommandLine");

                    b.Property<string>("Description");

                    b.Property<string>("Path");

                    b.Property<string>("ProcessId")
                        .IsRequired();

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ProcessId")
                        .IsUnique();

                    b.ToTable("ProcessInformations");
                });

            modelBuilder.Entity("SystemDiagnostic.Entitites.MonitoringInformation.ProcessPerfomance", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ComputerProcessId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int>("PercentCPUUsage");

                    b.Property<string>("ProcessId")
                        .IsRequired();

                    b.Property<int>("RamMemoryUsageMB");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("ProcessPerfomances");
                });

            modelBuilder.Entity("SystemDiagnostic.Entitites.OperatingInformation.ComputerSystem", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ComputerId")
                        .IsRequired();

                    b.Property<string>("ComputerName");

                    b.Property<string>("CurrentUsername");

                    b.Property<string>("DNSHostName");

                    b.HasKey("Id");

                    b.HasIndex("ComputerId")
                        .IsUnique();

                    b.ToTable("ComputerSystems");
                });

            modelBuilder.Entity("SystemDiagnostic.Entitites.ComputerComponents.DiskDrive", b =>
                {
                    b.HasOne("SystemDiagnostic.Entitites.Computer", "Computer")
                        .WithMany("DiskDrives")
                        .HasForeignKey("ComputerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SystemDiagnostic.Entitites.ComputerComponents.MotherBoard", b =>
                {
                    b.HasOne("SystemDiagnostic.Entitites.Computer", "Computer")
                        .WithOne("MotherBoard")
                        .HasForeignKey("SystemDiagnostic.Entitites.ComputerComponents.MotherBoard", "ComputerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SystemDiagnostic.Entitites.ComputerComponents.PhysicalMemory", b =>
                {
                    b.HasOne("SystemDiagnostic.Entitites.Computer", "Computer")
                        .WithMany("PhysicalMemories")
                        .HasForeignKey("ComputerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SystemDiagnostic.Entitites.ComputerComponents.Processor", b =>
                {
                    b.HasOne("SystemDiagnostic.Entitites.Computer", "Computer")
                        .WithOne("Processor")
                        .HasForeignKey("SystemDiagnostic.Entitites.ComputerComponents.Processor", "ComputerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SystemDiagnostic.Entitites.ComputerComponents.VideoCard", b =>
                {
                    b.HasOne("SystemDiagnostic.Entitites.Computer", "Computer")
                        .WithMany("VideoCards")
                        .HasForeignKey("ComputerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SystemDiagnostic.Entitites.MonitoringInformation.Process", b =>
                {
                    b.HasOne("SystemDiagnostic.Entitites.Computer", "Computer")
                        .WithMany("Processes")
                        .HasForeignKey("ComputerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SystemDiagnostic.Entitites.MonitoringInformation.ProcessInformation", b =>
                {
                    b.HasOne("SystemDiagnostic.Entitites.MonitoringInformation.Process", "Process")
                        .WithOne("ProcessInformation")
                        .HasForeignKey("SystemDiagnostic.Entitites.MonitoringInformation.ProcessInformation", "ProcessId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SystemDiagnostic.Entitites.MonitoringInformation.ProcessPerfomance", b =>
                {
                    b.HasOne("SystemDiagnostic.Entitites.MonitoringInformation.Process", "Process")
                        .WithMany("ProcessPerfomances")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SystemDiagnostic.Entitites.OperatingInformation.ComputerSystem", b =>
                {
                    b.HasOne("SystemDiagnostic.Entitites.Computer", "Computer")
                        .WithOne("ComputerSystem")
                        .HasForeignKey("SystemDiagnostic.Entitites.OperatingInformation.ComputerSystem", "ComputerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
